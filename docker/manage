#!/bin/bash

# ###
# Filename: manage
# Fichier shell script qui aide les tâches de build et de startup des containeurs de
# l'application du Club de Judo de Québec. 
# Si le fichier ne s'exécute pas dans votre syetème, il se peut qu'il n'a pas les 
# droits suffisants. Merci d'émettre la commande suivante pour regler le problème: 
#       $ chmod +x manage 
# 
# Author: Julio-Cesar Torres <juliozohar@gmail.com> (@juliozohar)
# Date: 2021-06-03
#
#   Copyright 2021 Kryptogarten LLC
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# ###

# Define a var for the current OS
if [[ $OSTYPE = 'darwin'* ]]; then
    export OS="Mac OS"
elif [[ $OSTYPE = 'linux-gnu' ]]; then 
    export OS="Linux"
else
    export OS="Windows"
fi

export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host eclipse/che-ip)}
set -e

#
# Global utility functions - START
#
function echoError (){
  _msg=${1}
  _red='\e[31m'
  _nc='\e[0m' # No Color
  echo -e "${_red}${_msg}${_nc}"
}

function echoWarning (){
  _msg=${1}
  _yellow='\e[33m'
  _nc='\e[0m' # No Color
  echo -e "${_yellow}${_msg}${_nc}"
}

function isInstalled () {
  rtnVal=$(type "$1" >/dev/null 2>&1)
  rtnCd=$?
  if [ ${rtnCd} -ne 0 ]; then
    return 1
  else
    return 0
  fi
}

function isCurlInstalled () {
  CURL_EXE=curl
  if ! isInstalled ${CURL_EXE}; then
    echoError "L'exécutable ${CURL_EXE} est nécessaire et n'a pas été retrouvé dans le PATH."
    echoError "Si votre shell préféré ne vient pas avec curl pré-installé, installez-le via [Homebrew](https://brew.sh/) (MAC) ou [Chocolatey](https://chocolatey.org/) (Windows)."
    exit 1
  fi
}

function isJQInstalled () {
  JQ_EXE=jq
  if ! isInstalled ${JQ_EXE}; then
    echoError "L'exécutable ${JQ_EXE} est nécessaire et n'a pas été retrouvé dans le PATH."
    echoError "Les instructions d'installation peuvent être retrouvées ici: https://stedolan.github.io/jq/download"
    echoError "Alternativement, un gestionnaire de paquets tel que Chocolatey (Windows) ou Brew (Mac) peut être utilisé pour installer cette dépendance."
    exit 1
  fi
}

function isNgrokInstalled () {
  NGROK_EXE=ngrok
  if ! isInstalled ${NGROK_EXE}; then
    echoError "L'exécutable ${NGROK_EXE} est nécessaire et n'a pas été retrouvé dans le PATH."
    echoError "Il peut être téléchargé ici: https://ngrok.com/download"
    echoError "Alternativement, un gestionnaire de paquets tel que Chocolatey (Windows) ou Brew (Mac) peut être utilisé pour installer cette dépendance."
    exit 1
  fi
}

function checkNgrokTunnelActive () {
  if [ -z "${NGROK_AGENT_ENDPOINT}" ]; then
    echoError "Il semble que ngrok tunneling n'est pas activé."
    echoError "Merci d'ouvrir un autre shell dans le répertoire des scripts et exécutez start-ngrok.sh avant de réessayer."
    exit 1
  fi
}

function generateKey(){
  (
    _length=${1:-48}
    # Format peut être `-base64` or `-hex`
    _format=${2:--base64}

    echo $(openssl rand ${_format} ${_length})
  )
}

function generateSeed(){
  (
    _prefix=${1}
    _seed=$(echo "${_prefix}$(generateKey 32)" | fold -w 32 | head -n 1 )
    _seed=$(echo -n "${_seed}")
    echo ${_seed}
  )
}
#
# Global utility functions - FIN
#
SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF

      Utilisation: $0 [command] [options]

      Commands:

      build     - Faire le build des images qui composent l'application. 

      build-db  - Faire le build de l'image de la BD. Ce build est persistent, si refait, 
                  il détruit les données de la BD - faire attention! 

      logs      - Display les logs de l'exécution du docker compose (ctrl-c pour sortir).

      start     - Exécute les containeurs en `production mode`.
      up        - Même que start.

      stop      - Arrete les services.  Ceci est un procès non-destructif.  Les volumes et containeurs
                  ne sont pas supprimés, alors ils peuvent être réutilisés la prochaine fois que vous exécuterez start. 

      down      - Arrete les services et supprime les volumes (storage) et containeurs.
      rm        - Même que down

EOF
  exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
build(){
  echo -e "\nBuilding cjq-frontend image..."
  docker build \
    -t 'cjq-frontend' \
    -f '../cjq-frontend/Dockerfile.frontend.dev' './../cjq-frontend/'

  echo -e "\nBuilding cjq-rest-api image..."
  docker build \
    -t 'cjq-rest-api' \
    -f '../cjq-api/Dockerfile.api.dev' './../cjq-api/'
}
build-api(){
  echo -e "\nBuilding cjq-rest-api image..."
  docker build \
    -t 'cjq-rest-api' \
    -f '../cjq-api/Dockerfile.api.dev' './../cjq-api/'
}

build-db(){
  echo -e "\nBuilding cjq-mysql-db image..."
  docker build \
    -t 'cjq-mysql-db' \
    -f '../mysql-obj/Dockerfile.mysql.dev' './../mysql-obj/'
}

configureEnvironment() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']}
      fi
    done <.env
  fi

  for arg in "$@"; do
    # Remove recognized arguments from the list after processing.
    shift

    # echo "arg: ${arg}"
    # echo "Remaining: ${@}"

    case "$arg" in
      *=*)
        # echo "Exporting ..."
        export "${arg}"
        ;;
      *)
        # echo "Saving for later ..."
        # If not recognized, save it for later procesing ...
        set -- "$@" "$arg"
        ;;
    esac
  done

  # Global
  export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-"cjq-website"}"
  export DEBUG=${DEBUG}
  export LOG_LEVEL=${LOG_LEVEL:-"DEBUG"}
  
  # Global environment vars
  export API_PORT=8001
  export APP_PORT=4200

  # MySQL environment vars 
  if [[ $OS = 'Windows' ]]; then 
    export MYSQL_PERSISTENCE_LOCALDIR='D:\Development\mysql-container\data'
  else
    export MYSQL_PERSISTENCE_LOCALDIR='~/Development/mysql-container/data'
  fi
  
  export MYSQL_DATABASE=CJQ
  export MYSQL_ROOT_PASSWORD=changemenow
  export MYSQL_PORT_LOCAL=3306
  export MYSQL_PORT_CONTAINER=3307
  
  # Adminer environment vars 
  export ADMINER_PORT_LOCAL=8888
  export ADMINER_PORT_CONTAINER=8080

  # Maildev 
  export MAILDEV_HOST=maildev
  export MAILDEV_PORT=7050
}

getInputParams() {
  ARGS=""

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    *)
      ARGS+=" $arg"
      ;;
    esac
  done

  echo ${ARGS}
}

getStartupParams() {
  CONTAINERS=""
  ARGS=""

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    *)
      CONTAINERS+=" $arg"
      ;;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi

  echo "Removing build cache ..."
  rm -Rf ../client/tob-web/.cache
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

echoError (){
  _msg=${1}
  _red='\033[0;31m'
  _nc='\033[0m' # No Color
  echo -e "${_red}${_msg}${_nc}" >&2
}

functionExists() {
  (
    if [ ! -z ${1} ] && type ${1} &>/dev/null; then
      return 0
    else
      return 1
    fi
  )
}
# =================================================================================================================

pushd "${SCRIPT_HOME}" >/dev/null
COMMAND=$(toLower ${1})
shift || COMMAND=usage

_startupParams=$(getStartupParams --force-recreate $@)

case "${COMMAND}" in
  logs)
    configureEnvironment "$@"
    docker-compose logs -f
    ;;
  build)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    build ${_startupParams}
    ;;
  build-db)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    build-db ${_startupParams}
    ;;
  build-api)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    build-api ${_startupParams}
    ;;
  start|start|up)
    configureEnvironment
    docker-compose up
    docker-compose logs -f
    ;;
  stop)
    configureEnvironment
    docker-compose stop
    ;;
  rm|down)
    if [ -f ".env" ] ; then
        rm ".env"
    fi
    configureEnvironment
    deleteVolumes
    ;;
  *)
    usage
    ;;
esac

popd >/dev/null
